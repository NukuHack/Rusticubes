// might need more of these small files for math and other extra shit 
use std::time::{SystemTime, UNIX_EPOCH};

// Fast random number generator (xorshift32)
pub struct Rand {
    state: u32,
}
#[allow(dead_code)]
impl Rand {
    #[inline]
    pub fn new(seed: u32) -> Self {
        Self { state: seed }
    }

    #[inline]
    pub fn from_time() -> Self {
        let seed = SystemTime::now()
            .duration_since(UNIX_EPOCH)
            .unwrap()
            .subsec_nanos();
        Self::new(seed)
    }

    #[inline]
    pub fn next_u32(&mut self) -> u32 {
        self.state ^= self.state << 13;
        self.state ^= self.state >> 17;
        self.state ^= self.state << 5;
        self.state
    }

    #[inline]
    fn next_basic_u32(&mut self) -> u32 {
        // Simple LCG random number generator
        self.state = self.state.wrapping_mul(1664525).wrapping_add(1013904223);
        self.state
    }

    #[inline]
    pub fn next_f32(&mut self) -> f32 {
        (self.next_u32() as f32) / (u32::MAX as f32)
    }

    #[inline]
    pub fn range_f32(&mut self, min: f32, max: f32) -> f32 {
        min + self.next_f32() * (max - min)
    }
}

// Convenience functions
#[inline]
pub fn random_float(min: f32, max: f32) -> f32 {
    Rand::from_time().range_f32(min, max)
}

#[inline]
pub fn random_float_seeded(seed: u32, min: f32, max: f32) -> f32 {
    Rand::new(seed).range_f32(min, max)
}



const SCALE: i16 = 1 << 8;
const OFFSET: i32 = 0x60C0_7C80; // random offset made by Deepseek

pub struct PerlInt {
    seed: u32,
}
// some of the code is copied from https://github.com/Auburn/FastNoiseLite/blob/master/Rust/src/lib.rs
impl PerlInt {
    pub fn new(seed: u32) -> Self {
        //let mut rng = Rand::new(seed);
                
        Self { seed }
    }
    
    #[inline(always)]
    fn lerp(a: i16, b: i16, t: i16) -> i16 {
        let a = a as i32;
        let b = b as i32;
        let t = t as i32;
        (a + ((b - a) * t) / 256) as i16
    }

    #[inline(always)]
    fn fade(t: i16) -> i16 {
        let t = t.clamp(0, 255) as i32;
        let t6 = t * t / 256 * t / 256 * t / 256 * t / 256 * 6;
        let t15 = t * t / 256 * t / 256 * t / 256 * 15;
        let t10 = t * t / 256 * t / 256 * 10;
        ((t6 - t15 + t10) / 256) as i16
    }
    
    #[inline(always)]
    fn grad(hash: u8, x: i16, y: i16) -> i16 {
        let grad0 = GRADIENTS_2D[(hash as usize) % GRADIENTS_2D.len()];
        let grad1 = GRADIENTS_2D[(hash as usize + 1usize) % GRADIENTS_2D.len()];
        (grad0 * x as f32 + grad1 * y as f32) as i16
    }
    
    #[inline(always)]
    fn hash(seed: u32, x: i32, y: i32) -> u8 {
        let hash = (seed ^ x as u32 ^ y as u32).wrapping_mul(0x27d4eb2d);
        let hash = (((hash ^ (hash >> 15)) & (127 << 1)) % u8::MAX as u32) as u8;
        hash
    }
    
    pub fn noise_2d(&self, x: i32, y: i32) -> u8 {
        let x = x.wrapping_add(OFFSET);
        let y = y.wrapping_add(-OFFSET);
        // Get integer and fractional parts
        let xi = x >> 8;
        let yi = y >> 8;        
        let xf = (x & (SCALE as i32 - 1)) as i16;
        let yf = (y & (SCALE as i32 - 1)) as i16;
                
        // Hash coordinates using our better hash function
        let seed = self.seed;
        let aa = Self::hash(seed, xi, yi);
        let ab = Self::hash(seed, xi, yi + 1);
        let ba = Self::hash(seed, xi + 1, yi);
        let bb = Self::hash(seed, xi + 1, yi + 1);
        
        // Compute dot products
        let g1 = Self::grad(aa, xf, yf);
        let g2 = Self::grad(ab, xf - SCALE, yf);
        let g3 = Self::grad(ba, xf, yf - SCALE);
        let g4 = Self::grad(bb, xf - SCALE, yf - SCALE);
        
        // Interpolate
        let result = Self::lerp(
            Self::lerp(g1, g2, Self::fade(xf)),
            Self::lerp(g3, g4, Self::fade(xf)),
            Self::fade(yf)
        );
        // this will result in a number between 0 and 510 but clamped with a "as u8" to be 255 max
        result as u8
    }
}


#[rustfmt::skip]
const GRADIENTS_2D: [f32; 256] = [
     0.130526192220052,  0.99144486137381,   0.38268343236509,   0.923879532511287,  0.608761429008721,  0.793353340291235,  0.793353340291235,  0.608761429008721,
     0.923879532511287,  0.38268343236509,   0.99144486137381,   0.130526192220051,  0.99144486137381,   0.130526192220051,  0.923879532511287,  0.38268343236509,
     0.793353340291235,  0.60876142900872,   0.608761429008721,  0.793353340291235,  0.38268343236509,   0.923879532511287,  0.130526192220052,  0.99144486137381,
     0.130526192220052,  0.99144486137381,   0.38268343236509,   0.923879532511287,  0.608761429008721,  0.793353340291235,  0.793353340291235,  0.608761429008721,
     0.923879532511287,  0.38268343236509,   0.99144486137381,   0.130526192220052,  0.99144486137381,   0.130526192220051,  0.923879532511287,  0.38268343236509,
     0.793353340291235,  0.608761429008721,  0.608761429008721,  0.793353340291235,  0.38268343236509,   0.923879532511287,  0.130526192220052,  0.99144486137381,
     0.130526192220052,  0.99144486137381,   0.38268343236509,   0.923879532511287,  0.608761429008721,  0.793353340291235,  0.793353340291235,  0.608761429008721,
     0.923879532511287,  0.38268343236509,   0.99144486137381,   0.130526192220051,  0.99144486137381,   0.130526192220051,  0.923879532511287,  0.38268343236509,
     0.793353340291235,  0.60876142900872,   0.608761429008721,  0.793353340291235,  0.38268343236509,   0.923879532511287,  0.130526192220052,  0.99144486137381,
     0.130526192220052,  0.99144486137381,   0.38268343236509,   0.923879532511287,  0.608761429008721,  0.793353340291235,  0.793353340291235,  0.608761429008721,
     0.923879532511287,  0.38268343236509,   0.99144486137381,   0.130526192220052,  0.99144486137381,   0.130526192220051,  0.923879532511287,  0.38268343236509,
     0.793353340291235,  0.608761429008721,  0.608761429008721,  0.793353340291235,  0.38268343236509,   0.923879532511287,  0.130526192220052,  0.99144486137381,
     0.130526192220052,  0.99144486137381,   0.38268343236509,   0.923879532511287,  0.608761429008721,  0.793353340291235,  0.793353340291235,  0.608761429008721,
     0.923879532511287,  0.38268343236509,   0.99144486137381,   0.130526192220051,  0.99144486137381,   0.130526192220051,  0.923879532511287,  0.38268343236509,
     0.793353340291235,  0.60876142900872,   0.608761429008721,  0.793353340291235,  0.38268343236509,   0.923879532511287,  0.130526192220052,  0.99144486137381,
     0.130526192220052,  0.99144486137381,   0.38268343236509,   0.923879532511287,  0.608761429008721,  0.793353340291235,  0.793353340291235,  0.608761429008721,
     0.923879532511287,  0.38268343236509,   0.99144486137381,   0.130526192220052,  0.99144486137381,   0.130526192220051,  0.923879532511287,  0.38268343236509,
     0.793353340291235,  0.608761429008721,  0.608761429008721,  0.793353340291235,  0.38268343236509,   0.923879532511287,  0.130526192220052,  0.99144486137381,
     0.130526192220052,  0.99144486137381,   0.38268343236509,   0.923879532511287,  0.608761429008721,  0.793353340291235,  0.793353340291235,  0.608761429008721,
     0.923879532511287,  0.38268343236509,   0.99144486137381,   0.130526192220051,  0.99144486137381,   0.130526192220051,  0.923879532511287,  0.38268343236509,
     0.793353340291235,  0.60876142900872,   0.608761429008721,  0.793353340291235,  0.38268343236509,   0.923879532511287,  0.130526192220052,  0.99144486137381,
     0.130526192220052,  0.99144486137381,   0.38268343236509,   0.923879532511287,  0.608761429008721,  0.793353340291235,  0.793353340291235,  0.608761429008721,
     0.923879532511287,  0.38268343236509,   0.99144486137381,   0.130526192220052,  0.99144486137381,   0.130526192220051,  0.923879532511287,  0.38268343236509,
     0.793353340291235,  0.608761429008721,  0.608761429008721,  0.793353340291235,  0.38268343236509,   0.923879532511287,  0.130526192220052,  0.99144486137381,
     0.130526192220052,  0.99144486137381,   0.38268343236509,   0.923879532511287,  0.608761429008721,  0.793353340291235,  0.793353340291235,  0.608761429008721,
     0.923879532511287,  0.38268343236509,   0.99144486137381,   0.130526192220051,  0.99144486137381,   0.130526192220051,  0.923879532511287,  0.38268343236509,
     0.793353340291235,  0.60876142900872,   0.608761429008721,  0.793353340291235,  0.38268343236509,   0.923879532511287,  0.130526192220052,  0.99144486137381,
     0.130526192220052,  0.99144486137381,   0.38268343236509,   0.923879532511287,  0.608761429008721,  0.793353340291235,  0.793353340291235,  0.608761429008721,
     0.923879532511287,  0.38268343236509,   0.99144486137381,   0.130526192220052,  0.99144486137381,   0.130526192220051,  0.923879532511287,  0.38268343236509,
     0.793353340291235,  0.608761429008721,  0.608761429008721,  0.793353340291235,  0.38268343236509,   0.923879532511287,  0.130526192220052,  0.99144486137381,
     0.38268343236509,   0.923879532511287,  0.923879532511287,  0.38268343236509,   0.923879532511287,  0.38268343236509,   0.38268343236509,   0.923879532511287,
     0.38268343236509,   0.923879532511287,  0.923879532511287,  0.38268343236509,   0.923879532511287,  0.38268343236509,   0.38268343236509,   0.923879532511287,
];